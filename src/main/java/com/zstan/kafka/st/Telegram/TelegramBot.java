package com.zstan.kafka.st.Telegram;


import com.zstan.kafka.st.Entity.Category;
import com.zstan.kafka.st.Entity.MenuItem;
import com.zstan.kafka.st.Entity.Product;
import com.zstan.kafka.st.Entity.Restaurant;
import com.zstan.kafka.st.OpenAI.OpenAIService;
import com.zstan.kafka.st.Service.*;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.stereotype.Component;
import org.telegram.telegrambots.bots.TelegramLongPollingBot;
import org.telegram.telegrambots.meta.api.methods.send.SendMessage;
import org.telegram.telegrambots.meta.api.methods.send.SendPhoto;
import org.telegram.telegrambots.meta.api.methods.updatingmessages.EditMessageText;
import org.telegram.telegrambots.meta.api.objects.InputFile;
import org.telegram.telegrambots.meta.api.objects.Update;
import org.telegram.telegrambots.meta.api.objects.replykeyboard.InlineKeyboardMarkup;
import org.telegram.telegrambots.meta.api.objects.replykeyboard.buttons.InlineKeyboardButton;
import org.telegram.telegrambots.meta.exceptions.TelegramApiException;

import java.util.ArrayList;
import java.util.List;


@Component
public class TelegramBot extends TelegramLongPollingBot {

    @Value("${bot.token}")
    private String botToken;

    @Value("${bot.username}")
    private String botUsername;

    @Autowired
    private CategoryService categoryService;

    @Autowired
    private ProductService productService;

    @Autowired
    private CartService cartService;

    @Autowired
    private PaymentService paymentService;

    @Autowired
    private OpenAIService openAIService;

    @Autowired
    private RestaurantService restaurantService;

    @Autowired
    private MenuService menuService;

    @Value("${payment.currency}")
    private String paymentCurrency;

    // –ú–µ—Ç–æ–¥ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∏–º—è –±–æ—Ç–∞
    @Override
    public String getBotUsername() {
        return botUsername;
    }

    // –ú–µ—Ç–æ–¥ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ç–æ–∫–µ–Ω –±–æ—Ç–∞
    @Override
    public String getBotToken() {
        return botToken;
    }

    // –ú–µ—Ç–æ–¥ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—Ö–æ–¥—è—â–∏–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –æ—Ç Telegram
    @Override
    public void onUpdateReceived(Update update) {
        try {
            if (update.hasMessage() && update.getMessage().hasText()) {
                String chatId = update.getMessage().getChatId().toString();
                String userMessage = update.getMessage().getText();

                String botResponse = handleCommand(userMessage, Long.parseLong(chatId));

                if (botResponse != null) {
                    sendMessage(chatId, botResponse);
                }
            } else if (update.hasCallbackQuery()) {
                String callbackData = update.getCallbackQuery().getData();
                String chatId = update.getCallbackQuery().getMessage().getChatId().toString();

                String botResponse = handleCallback(callbackData, Long.parseLong(chatId));
                if (botResponse != null) {
                    editMessage(chatId, update.getCallbackQuery().getMessage().getMessageId(), botResponse);
                }
            }
        } catch (Exception e) {
            e.printStackTrace();
        }
    }

    // –ú–µ—Ç–æ–¥ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Ç–µ–∫—Å—Ç–æ–≤—ã–µ –∫–æ–º–∞–Ω–¥—ã –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    private String handleCommand(String command, Long userId) {
        if (command.equalsIgnoreCase("/start")) {
            return "üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ SHAKH_Bot!\n" +
                    "–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n" +
                    "/categories - –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏–∏\n" +
                    "/restaurants - —Å–ø–∏—Å–æ–∫ —Ä–µ—Å—Ç–æ—Ä–∞–Ω–æ–≤\n" +
                    "/cart - –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –∫–æ—Ä–∑–∏–Ω—É\n" +
                    "/pay - –æ–ø–ª–∞—Ç–∏—Ç—å –∑–∞–∫–∞–∑\n" +
                    "/help - —Å–ø—Ä–∞–≤–∫–∞\n";
        } else if (command.equalsIgnoreCase("/categories")) {
            return sendCategories(userId);
        } else if (command.equalsIgnoreCase("/restaurants")) {
            sendRestaurants(userId);
            return null;
        } else if (command.equalsIgnoreCase("/cart")) {
            return cartService.getCartContent(userId);
        } else if (command.equalsIgnoreCase("/pay")) {
            return processPayment(userId);
        } else if (command.equalsIgnoreCase("/help")) {
            return "üõ†Ô∏è –î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n" +
                    "/categories - –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏–∏\n" +
                    "/restaurants - —Å–ø–∏—Å–æ–∫ —Ä–µ—Å—Ç–æ—Ä–∞–Ω–æ–≤\n" +
                    "/cart - –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –∫–æ—Ä–∑–∏–Ω—É\n" +
                    "/pay - –æ–ø–ª–∞—Ç–∏—Ç—å –∑–∞–∫–∞–∑\n" +
                    "/help - –ø–æ–º–æ—â—å –ø–æ –∫–æ–º–∞–Ω–¥–∞–º\n" +
                    "–í—ã —Ç–∞–∫–∂–µ –º–æ–∂–µ—Ç–µ –∑–∞–¥–∞—Ç—å –ª—é–±–æ–π –≤–æ–ø—Ä–æ—Å.";
        } else {
            return handleOpenAIResponse(command);
        }
    }

    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø—Ä–æ–∏–∑–≤–æ–ª—å–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–∞ —á–µ—Ä–µ–∑ OpenAI
    private String handleOpenAIResponse(String command) {
        try {
            String aiResponse = openAIService.getGPTResponse(command);
            return aiResponse != null ? aiResponse : "‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤–∞—à–µ–≥–æ –∑–∞–ø—Ä–æ—Å–∞.";
        } catch (Exception e) {
            e.printStackTrace();
            return "‚ö†Ô∏è –û—à–∏–±–∫–∞: –Ω–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –æ—Ç–≤–µ—Ç –æ—Ç AI.";
        }
    }

    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–µ–π—Å—Ç–≤–∏–π —Å –∫–Ω–æ–ø–∫–∞–º–∏ (callback-–¥–∞–Ω–Ω—ã–µ)
    private String handleCallback(String callbackData, Long userId) {
        if (callbackData.startsWith("/menu")) {
            Long restaurantId = Long.parseLong(callbackData.split(" ")[1]);
            sendMenu(restaurantId, userId);
            return null;
        } else if (callbackData.startsWith("/add_to_cart")) {
            String[] parts = callbackData.split(" ");
            Long productId = Long.parseLong(parts[1]);
            int quantity = Integer.parseInt(parts[2]);
            return cartService.addToCart(userId, productId, quantity);
        } else if (callbackData.startsWith("/products")) {
            Long categoryId = Long.parseLong(callbackData.split(" ")[1]);
            sendProducts(categoryId, userId);
            return null;
        }
        return "‚ö†Ô∏è –î–µ–π—Å—Ç–≤–∏–µ –Ω–µ —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω–æ.";
    }

    // –ú–µ—Ç–æ–¥ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–ø–∏—Å–æ–∫ –ø—Ä–æ–¥—É–∫—Ç–æ–≤ –∏–∑ –≤—ã–±—Ä–∞–Ω–Ω–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
    private void sendProducts(Long categoryId, Long userId) {
        List<Product> products = productService.getProductsByCategory(categoryId);
        if (products.isEmpty()) {
            sendMessage(userId.toString(), "‚ö†Ô∏è –í —ç—Ç–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –ø–æ–∫–∞ –Ω–µ—Ç —Ç–æ–≤–∞—Ä–æ–≤.");
            return;
        }

        for (Product product : products) {
            SendPhoto photo = new SendPhoto();
            photo.setChatId(userId.toString());

            // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ URL –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
            String imageUrl = product.getImageUrl();
            if (imageUrl == null || imageUrl.isEmpty()) {
                // –ï—Å–ª–∏ URL –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –ø—É—Å—Ç, —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º placeholder
                imageUrl = "https://via.placeholder.com/300?text=–ù–µ—Ç+–∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è";
            }
            photo.setPhoto(new InputFile(imageUrl));

            String caption = "üõçÔ∏è " + product.getName() + "\n" +
                    "üíµ –¶–µ–Ω–∞: " + product.getPrice() + " —Ä—É–±.\n" +
                    "üìÑ " + product.getDescription();
            photo.setCaption(caption);

            InlineKeyboardMarkup keyboard = new InlineKeyboardMarkup();
            List<List<InlineKeyboardButton>> rows = new ArrayList<>();
            List<InlineKeyboardButton> row = new ArrayList<>();
            row.add(InlineKeyboardButton.builder()
                    .text("üõí –î–æ–±–∞–≤–∏—Ç—å –≤ –∫–æ—Ä–∑–∏–Ω—É")
                    .callbackData("/add_to_cart " + product.getId() + " 1")
                    .build());
            rows.add(row);
            keyboard.setKeyboard(rows);

            photo.setReplyMarkup(keyboard);

            try {
                execute(photo);
            } catch (TelegramApiException e) {
                e.printStackTrace();
            }
        }
    }

    // –ú–µ—Ç–æ–¥ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–ø–∏—Å–æ–∫ —Ä–µ—Å—Ç–æ—Ä–∞–Ω–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
    private void sendRestaurants(Long chatId) {
        List<Restaurant> restaurants = restaurantService.getAllRestaurants();
        if (restaurants.isEmpty()) {
            sendMessage(chatId.toString(), "‚ö†Ô∏è –†–µ—Å—Ç–æ—Ä–∞–Ω—ã –ø–æ–∫–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã.");
            return;
        }

        InlineKeyboardMarkup keyboard = new InlineKeyboardMarkup();
        List<List<InlineKeyboardButton>> rows = new ArrayList<>();

        for (Restaurant restaurant : restaurants) {
            List<InlineKeyboardButton> row = new ArrayList<>();
            row.add(InlineKeyboardButton.builder()
                    .text(restaurant.getName() + (restaurant.isOpen() ? " üü¢" : " üî¥"))
                    .callbackData("/menu " + restaurant.getId())
                    .build());
            rows.add(row);
        }

        keyboard.setKeyboard(rows);

        SendMessage message = new SendMessage();
        message.setChatId(chatId.toString());
        message.setText("üè† –°–ø–∏—Å–æ–∫ —Ä–µ—Å—Ç–æ—Ä–∞–Ω–æ–≤:");
        message.setReplyMarkup(keyboard);

        try {
            execute(message);
        } catch (TelegramApiException e) {
            e.printStackTrace();
        }
    }

    // –ú–µ—Ç–æ–¥ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –º–µ–Ω—é —Ä–µ—Å—Ç–æ—Ä–∞–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
    private void sendMenu(Long restaurantId, Long chatId) {
        List<MenuItem> menu = menuService.getMenuByRestaurantId(restaurantId);
        if (menu.isEmpty()) {
            sendMessage(chatId.toString(), "‚ö†Ô∏è –í –º–µ–Ω—é —ç—Ç–æ–≥–æ —Ä–µ—Å—Ç–æ—Ä–∞–Ω–∞ –ø–æ–∫–∞ –Ω–µ—Ç —Ç–æ–≤–∞—Ä–æ–≤.");
            return;
        }

        for (MenuItem item : menu) {
            SendPhoto photo = new SendPhoto();
            photo.setChatId(chatId.toString());
            photo.setPhoto(new InputFile(item.getImageUrl()));

            String caption = "üç¥ " + item.getName() + "\n" +
                    "üíµ –¶–µ–Ω–∞: " + item.getPrice() + " —Å–æ–º.\n" +
                    "üìÑ " + item.getDescription();
            photo.setCaption(caption);

            InlineKeyboardMarkup keyboard = new InlineKeyboardMarkup();
            List<List<InlineKeyboardButton>> rows = new ArrayList<>();
            List<InlineKeyboardButton> row = new ArrayList<>();
            row.add(InlineKeyboardButton.builder()
                    .text("üõí –î–æ–±–∞–≤–∏—Ç—å –≤ –∫–æ—Ä–∑–∏–Ω—É")
                    .callbackData("/add_to_cart " + item.getId() + " 1")
                    .build());
            rows.add(row);
            keyboard.setKeyboard(rows);

            photo.setReplyMarkup(keyboard);

            try {
                execute(photo);
            } catch (TelegramApiException e) {
                e.printStackTrace();
            }
        }
    }

    // –ú–µ—Ç–æ–¥ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –æ–ø–ª–∞—Ç—É –∫–æ—Ä–∑–∏–Ω—ã
    private String processPayment(Long userId) {
        try {
            Long amount = (long) cartService.getCartTotal(userId);
            if (amount == 0) {
                return "üõí –í–∞—à–∞ –∫–æ—Ä–∑–∏–Ω–∞ –ø—É—Å—Ç–∞. –î–æ–±–∞–≤—å—Ç–µ —Ç–æ–≤–∞—Ä—ã –¥–ª—è –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è –æ–ø–ª–∞—Ç—ã.";
            }

            String paymentLink = paymentService.createPaymentIntent(amount * 100, paymentCurrency);

            if (paymentLink != null) {
                return "üí≥ –î–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –æ–ø–ª–∞—Ç—ã –ø–µ—Ä–µ–π–¥–∏—Ç–µ –ø–æ —Å—Å—ã–ª–∫–µ:\n" + paymentLink;
            } else {
                return "‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –æ–ø–ª–∞—Ç—É. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.";
            }
        } catch (Exception e) {
            return "‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –æ–ø–ª–∞—Ç—É. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.";
        }
    }

    // –ú–µ—Ç–æ–¥ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –ø—Ä–æ–¥—É–∫—Ç–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
    private String sendCategories(Long userId) {
        List<Category> categories = categoryService.getAllCategories();
        if (categories.isEmpty()) {
            return "‚ö†Ô∏è –ö–∞—Ç–µ–≥–æ—Ä–∏–π –ø–æ–∫–∞ –Ω–µ—Ç.";
        }

        InlineKeyboardMarkup keyboard = new InlineKeyboardMarkup();
        List<List<InlineKeyboardButton>> rows = new ArrayList<>();

        for (Category category : categories) {
            List<InlineKeyboardButton> row = new ArrayList<>();
            row.add(InlineKeyboardButton.builder()
                    .text(category.getName())
                    .callbackData("/products " + category.getId())
                    .build());
            rows.add(row);
        }

        keyboard.setKeyboard(rows);

        SendMessage message = new SendMessage();
        message.setChatId(userId.toString());
        message.setText("–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é:");
        message.setReplyMarkup(keyboard);

        try {
            execute(message);
            return null;
        } catch (TelegramApiException e) {
            return "‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–π. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.";
        }
    }

    // –ú–µ—Ç–æ–¥ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
    private void sendMessage(String chatId, String text) {
        SendMessage message = new SendMessage();
        message.setChatId(chatId);
        message.setText(text);

        try {
            execute(message);
        } catch (TelegramApiException e) {
            e.printStackTrace();
        }
    }

    // –ú–µ—Ç–æ–¥ —Ä–µ–¥–∞–∫—Ç–∏—Ä—É–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    private void editMessage(String chatId, Integer messageId, String text) {
        EditMessageText editMessage = new EditMessageText();
        editMessage.setChatId(chatId);
        editMessage.setMessageId(messageId);
        editMessage.setText(text);

        try {
            execute(editMessage);
        } catch (TelegramApiException e) {
            e.printStackTrace();
        }
    }
}


